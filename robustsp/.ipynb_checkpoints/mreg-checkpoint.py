# -*- coding: utf-8 -*-
"""Mreg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wSKCmms9UXZBhjMBSRwE3fUkGgtLYQXM

#TODO

ladreg

# Docs

[Matlab version](https://github.com/RobustSP/toolbox/blob/master/codes/02_Regression/Mreg.m)

Mreg computes the M-estimates of regression using an auxiliary scale
estimate. 

It uses the iterative reweighted least squares (IRWLS) algorithm.

Dependencies: ladreg, ladlasso, whub, and wtuk

| **Inputs** |   
|---|---|
| y  |  (numeric) data vector of size $N\times 1$ (output, response vector) |
|  x |  (numeric) data matrix of size $N\times p$ (input, feature matrix).<br>If the model has intercept, then first column of X should be a <br>vector of ones. |
| lossfun  |  (string) either **'huber'**(default) or** 'tukey'** to identify the desired loss function |
|b0|(numeric) Optional robust initial start (regression vector) of <br>iterations. If not given, we use the LAD regression estimate
|verbose|(logical) true of false (default).<br> Set as true if you wish to see convergence as iterations evolve.
| <br/><br/> | |
|**Outputs**||
|b1||
|sig||

# Implementation
"""

import numpy as np
a = [0,0,4,2,4,2,0,4,0,0,9]
a = np.asarray(a)
a = np.asarray(a)
print(a[a!=0])
b = [[1,2,3],[4,5,6]]
print(b)
b = np.asarray(b)
print(b)
a[a>0] =1
print(a)

def Mreg(y, x, lossfun='huber', b0=ladreg(y,X,False), verbose=False):
  y = np.asarray(y)
  x = np.asarray(x)
  if lossfun == 'huber':
    if np.iscomplexobj(y):
      const = 1.20112
      c     = 1.214 # 95 percent ARE
    else:
      const = 1.4815
      c     = 1.345 # 95 percent ARE
    wfun = lambda x: whub(x,c) # todo
  elif lossfun == 'tukey':
    if np.iscomplexobj(y):
      const = 1.20112
      c     = 1.214 # 95 percent ARE
    else:
      const = 1.4815
      c     = 1.345 # 95 percent ARE
    wfun = lambda x: wtuk(x,c) # todo
  else:
    # TODO Error
    
  resid = np.absolute(y-x*b0)
  sig   = const*np.median(resid[resid!=0]) # auxiliary scale estimate
  
  ITERMAX = 1000; # Maybe default parameters ?
  TOL = 1.0e-5;
  
  if verbose: print('Mreg: iterations starting, using %s loss function \n' % lossfun)
    
  for iter in range(ITERMAX):
    resid[resid < .000001] = .000001
    w = wfun(resid/sig)
    Xstar = X * w #bsxfun(@times, X, w)
    b1 = (Xstar.T *X) \ (Xstar.T *y)

    crit = norm(b1-b0)/norm(b0) 
    if verbose and mod(iter,1)==0:
       print('Mreg: crit(%4d) = %.9f\n' % iter,crit)
    if crit < TOL: break
    b0 = b1
    resid = np.absolute(y-x*b0)

  return b1, sig

"""# Tests

Testcases have been generated with the Matlab version
"""